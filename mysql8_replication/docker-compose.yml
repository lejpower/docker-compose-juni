version: "3.9"

services:
  mysql8_1:
    image: mysql:8.0.28
    platform: linux/amd64
    container_name: juni_mysql8.0.28_1
    ports:
      - "3301:3306"
    environment:
      MYSQL_DATABASE: "junitest"
      MYSQL_USER: "juni"
      MYSQL_PASSWORD: "juni"
      MYSQL_ROOT_PASSWORD: "admin"
      #TZ: "Asia/Tokyo"
      TZ: "UTC"
    volumes:
      - ./my8.cnf:/etc/mysql/conf.d/my.cnf
      - ./test_db:/usr/local/src/test_db
      - ./mysql8_1-initdb:/docker-entrypoint-initdb.d
      - ./entrypoint_mysql8_1.sh:/usr/local/bin/entrypoint.sh  # 스크립트 추가
    #entrypoint: /usr/local/bin/entrypoint.sh
    command: 
      - --innodb_use_native_aio=0
      - --enable-log-bin
      - --server-id=1
      - --log-bin=mysql-bin.log
    networks:
      - juni-network

  mysql8_2:
    image: mysql:8.0.28
    platform: linux/amd64
    container_name: juni_mysql8.0.28_2
    ports:
      - "3302:3306"
    environment:
      MYSQL_DATABASE: "junitest"
      MYSQL_USER: "juni"
      MYSQL_PASSWORD: "juni"
      MYSQL_ROOT_PASSWORD: "admin"
      TZ: Asia/Tokyo
    volumes:
      - ./my8_replica.cnf:/etc/mysql/conf.d/my.cnf
      - ./test_db:/usr/local/src/test_db
      - ./mysql8_2-initdb:/docker-entrypoint-initdb.d
      - ./entrypoint_mysql8_2.sh:/usr/local/bin/entrypoint.sh  # 스크립트 추가
    #entrypoint: /usr/local/bin/entrypoint.sh
    command: 
      - --innodb_use_native_aio=0
      - --disable-log-bin
      - --server-id=2
    networks:
      - juni-network

  rails_app:
    image: ruby:3.1.6
    container_name: rails_app
    #command: bash -c "gem install bundler -v 2.5.18 && bundle install && rm -f tmp/pids/server.pid"
    command: bash -c "gem install bundler -v 2.5.18 && bundle install && rails new /usr/src/app juni_rails && bundle exec rails s -b '0.0.0.0'"
    ports:
      - "3000:3000"
    environment:
      DATABASE_HOST: mysql8_1
      DATABASE_NAME: junitest
      DATABASE_USER: juni
      DATABASE_PASSWORD: juni
      RAILS_ENV: development
    volumes:
      - ./rails_related:/usr/src/app
    working_dir: /usr/src/app
    depends_on:
      - mysql8_1
    networks:
      - juni-network

networks:
  juni-network:
    driver: bridge

#  mysql57:
#    image: mysql:5.7.44
#    platform: linux/amd64
#    container_name: juni_mysql5.7.44
#    ports:
#      - "3302:3306"
#    environment:
#      MYSQL_DATABASE: "junitest"
#      MYSQL_USER: "juni"
#      MYSQL_PASSWORD: "juni"
#      MYSQL_ROOT_PASSWORD: "admin"
#      TZ: "Asia/Tokyo"
#    volumes:
#      - ./my57.cnf:/etc/mysql/conf.d/my.cnf
#      - ./test_db:/usr/local/src/test_db
#    command: 
#      - --innodb_use_native_aio=0
#      - --disable-log-bin


# docker-compose up -d 
# docker-compose down
# docker-compose down --volumes 
  # 볼륨까지 삭제한다.
# docker-compose down --rmi all
  # 이미지도 삭제한다.

# docker-compose exec mysql8_1 bash -c 'mysql -uroot -padmin -P3301'
# docker-compose exec mysql8_2 bash -c 'mysql -uroot -padmin -P3302'
# https://zenn.dev/ryo7/articles/create-mysql-on-docker
# docker-compose exec mysql8_2
# docker-compse restart mysql8_2
# docker-compose logs mysql8_1
# docker-compose logs mysql8_2
### rails 컨테이너에 들어감
# docker-compose exec rails_app bash 
##### 
# docker compose run slap `
#####
# mysqlslap  --no-defaults --auto-generate-sql `
# --engine=innodb --auto-generate-sql-add-autoincrement  `
# --host=192.168.16.3 --port=3306 -u root -proot `
# --number-int-cols=10  --number-char-cols=10  --iterations=10  --concurrency=50  `
# --auto-generate-sql-write-number=10  --number-of-queries=10  --auto-generate-sql-load-type=read

# (master)
# CREATE USER 'repl'@'192.168.%.%' IDENTIFIED WITH mysql_native_password BY 'repl';
# GRANT REPLICATION SLAVE ON *.* TO 'repl'@'192.168.%.%';
# 
# CREATE USER 'repl'@'%' IDENTIFIED WITH mysql_native_password BY 'repl';
# GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
# 
# show grants for 'repl'@'192.168.%.%' ;
# 
# show master status;

# replication (replica)
# CHANGE MASTER TO MASTER_HOST = 'juni_mysql8.0.28_1', MASTER_PORT = 3301, MASTER_USER = 'repl', MASTER_PASSWORD = 'repl', MASTER_LOG_FILE='mysql-bin.000003', MASTER_LOG_POS=157;
# START SLAVE USER = 'repl' PASSWORD = 'repl';
# show replica status\G


